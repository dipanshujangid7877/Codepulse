'use strict';

var React = require('react');
var clsx = require('clsx');
var styled = require('styled-components');
var constants = require('./constants.js');
var ThemeProvider = require('./ThemeProvider.js');
require('./FeatureFlags/FeatureFlags.js');
var useFeatureFlag = require('./FeatureFlags/useFeatureFlag.js');
require('./FeatureFlags/DefaultFeatureFlags.js');
var Box = require('./Box/Box.js');
var includeSystemProps = require('./utils/includeSystemProps.js');
var BaseStyles_module = require('./BaseStyles.module.css.js');
require('focus-visible');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);
var styled__default = /*#__PURE__*/_interopDefault(styled);

function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const CSS_MODULES_FEATURE_FLAG = 'primer_react_css_modules_staff';
const GlobalStyle = styled.createGlobalStyle(["*{box-sizing:border-box;}body{margin:0;}table{border-collapse:collapse;}input{color-scheme:", ";}[role=\"button\"]:focus:not(:focus-visible):not(.focus-visible),[role=\"tabpanel\"][tabindex=\"0\"]:focus:not(:focus-visible):not(.focus-visible),button:focus:not(:focus-visible):not(.focus-visible),summary:focus:not(:focus-visible):not(.focus-visible),a:focus:not(:focus-visible):not(.focus-visible){outline:none;box-shadow:none;}[tabindex=\"0\"]:focus:not(:focus-visible):not(.focus-visible),details-dialog:focus:not(:focus-visible):not(.focus-visible){outline:none;}"], props => props.colorScheme);
const StyledDiv = styled__default.default.div.withConfig({
  displayName: "BaseStyles__StyledDiv",
  componentId: "sc-nfjs56-0"
})(["", ";", ";"], constants.TYPOGRAPHY, constants.COMMON);
function BaseStyles(props) {
  const {
    children,
    color,
    fontFamily,
    lineHeight,
    className,
    as: Component = 'div',
    style,
    ...rest
  } = props;
  const {
    colorScheme,
    dayScheme,
    nightScheme
  } = ThemeProvider.useTheme();
  const enabled = useFeatureFlag.useFeatureFlag(CSS_MODULES_FEATURE_FLAG);
  if (enabled) {
    const newClassName = clsx.clsx(BaseStyles_module.BaseStyles, className);
    const baseStyles = {
      ['--BaseStyles-fgColor']: color,
      ['--BaseStyles-fontFamily']: fontFamily,
      ['--BaseStyles-lineHeight']: lineHeight
    };

    // If props includes TYPOGRAPHY or COMMON props, pass them to the Box component
    if (includeSystemProps.includesSystemProps(props)) {
      const systemProps = includeSystemProps.getTypographyAndCommonProps(props);
      return (
        /*#__PURE__*/
        // @ts-ignore shh
        React__default.default.createElement(Box, _extends({
          as: Component,
          className: newClassName,
          "data-portal-root": true
          /**
           * We need to map valid primer/react color modes onto valid color modes for primer/primitives
           * valid color modes for primer/primitives: auto | light | dark
           * valid color modes for primer/primer: auto | day | night | light | dark
           */,
          "data-color-mode": colorScheme !== null && colorScheme !== undefined && colorScheme.includes('dark') ? 'dark' : 'light',
          "data-light-theme": dayScheme,
          "data-dark-theme": nightScheme,
          style: {
            ...systemProps,
            ...baseStyles,
            ...style
          }
        }, rest), children)
      );
    }
    return /*#__PURE__*/React__default.default.createElement(Component, _extends({
      className: newClassName,
      "data-portal-root": true
      /**
       * We need to map valid primer/react color modes onto valid color modes for primer/primitives
       * valid color modes for primer/primitives: auto | light | dark
       * valid color modes for primer/primer: auto | day | night | light | dark
       */,
      "data-color-mode": colorScheme !== null && colorScheme !== undefined && colorScheme.includes('dark') ? 'dark' : 'light',
      "data-light-theme": dayScheme,
      "data-dark-theme": nightScheme,
      style: {
        ...baseStyles,
        ...style
      }
    }, rest), children);
  }
  return /*#__PURE__*/React__default.default.createElement(StyledDiv, _extends({
    className: className,
    color: color !== null && color !== undefined ? color : 'var(--fgColor-default)',
    fontFamily: fontFamily !== null && fontFamily !== undefined ? fontFamily : 'normal',
    lineHeight: lineHeight !== null && lineHeight !== undefined ? lineHeight : 'default',
    "data-portal-root": true
    /**
     * We need to map valid primer/react color modes onto valid color modes for primer/primitives
     * valid color modes for primer/primitives: auto | light | dark
     * valid color modes for primer/primer: auto | day | night | light | dark
     */,
    "data-color-mode": colorScheme !== null && colorScheme !== undefined && colorScheme.includes('dark') ? 'dark' : 'light',
    "data-light-theme": dayScheme,
    "data-dark-theme": nightScheme,
    style: style
  }, rest), /*#__PURE__*/React__default.default.createElement(GlobalStyle, {
    colorScheme: colorScheme !== null && colorScheme !== undefined && colorScheme.includes('dark') ? 'dark' : 'light'
  }), children);
}
BaseStyles.displayName = "BaseStyles";

module.exports = BaseStyles;
