import type { To } from 'history';
import React from 'react';
import type { SxProp } from '../sx';
import type { ComponentProps } from '../utils/types';
import type { ForwardRefComponent as PolymorphicForwardRefComponent } from '../utils/polymorphic';
declare const BreadcrumbsBase: React.ForwardRefExoticComponent<Omit<{
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} & {
    theme?: any;
} & {
    as?: string | React.ComponentType<any> | undefined;
    forwardedAs?: string | React.ComponentType<any> | undefined;
}, "ref"> & React.RefAttributes<unknown>>;
export type BreadcrumbsProps = React.PropsWithChildren<{
    className?: string;
} & SxProp>;
declare function Breadcrumbs({ className, children, sx: sxProp }: React.PropsWithChildren<BreadcrumbsProps>): React.JSX.Element;
declare namespace Breadcrumbs {
    var displayName: string;
}
type StyledBreadcrumbsItemProps = {
    to?: To;
    selected?: boolean;
    className?: string;
} & SxProp & React.ComponentPropsWithoutRef<'a'>;
declare const BreadcrumbsItem: PolymorphicForwardRefComponent<"a", StyledBreadcrumbsItemProps>;
export type BreadcrumbsItemProps = ComponentProps<typeof BreadcrumbsItem>;
declare const _default: typeof Breadcrumbs & {
    Item: PolymorphicForwardRefComponent<"a", StyledBreadcrumbsItemProps>;
};
export default _default;
/**
 * @deprecated Use the `Breadcrumbs` component instead (i.e. `<Breadcrumb>` â†’ `<Breadcrumbs>`)
 */
export declare const Breadcrumb: typeof Breadcrumbs & {
    Item: PolymorphicForwardRefComponent<"a", StyledBreadcrumbsItemProps>;
};
/**
 * @deprecated Use the `BreadcrumbsProps` type instead
 */
export type BreadcrumbProps = ComponentProps<typeof BreadcrumbsBase>;
/**
 * @deprecated Use the `BreadcrumbsItemProps` type instead
 */
export type BreadcrumbItemProps = ComponentProps<typeof BreadcrumbsItem>;
//# sourceMappingURL=Breadcrumbs.d.ts.map