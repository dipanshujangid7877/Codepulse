'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var styled = require('styled-components');
var React = require('react');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
var constants = require('../constants.js');
require('@primer/behaviors/utils');
require('@primer/behaviors');
var useOverlay = require('../hooks/useOverlay.js');
var useRefObjectAsForwardedRef = require('../hooks/useRefObjectAsForwardedRef.js');
var Portal = require('../Portal/Portal.js');
var sx = require('../sx.js');
var ThemeProvider = require('../ThemeProvider.js');
require('../FeatureFlags/FeatureFlags.js');
var useFeatureFlag = require('../FeatureFlags/useFeatureFlag.js');
require('../FeatureFlags/DefaultFeatureFlags.js');
var toggleStyledComponent = require('../internal/utils/toggleStyledComponent.js');
var Overlay_module = require('./Overlay.module.css.js');
var clsx = require('clsx');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);
var React__default = /*#__PURE__*/_interopDefault(React);

function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const CSS_MODULES_FLAG = 'primer_react_css_modules_staff';
const heightMap = {
  xsmall: '192px',
  small: '256px',
  medium: '320px',
  large: '432px',
  xlarge: '600px',
  auto: 'auto',
  initial: 'auto',
  // Passing 'initial' initially applies 'auto'
  'fit-content': 'fit-content'
};
const widthMap = {
  small: '256px',
  medium: '320px',
  large: '480px',
  xlarge: '640px',
  xxlarge: '960px',
  auto: 'auto'
};
const animationDuration = 200;
function getSlideAnimationStartingVector(anchorSide) {
  if (anchorSide !== null && anchorSide !== undefined && anchorSide.endsWith('bottom')) {
    return {
      x: 0,
      y: -1
    };
  } else if (anchorSide !== null && anchorSide !== undefined && anchorSide.endsWith('top')) {
    return {
      x: 0,
      y: 1
    };
  } else if (anchorSide !== null && anchorSide !== undefined && anchorSide.endsWith('right')) {
    return {
      x: -1,
      y: 0
    };
  } else if (anchorSide !== null && anchorSide !== undefined && anchorSide.endsWith('left')) {
    return {
      x: 1,
      y: 0
    };
  }
  return {
    x: 0,
    y: 0
  };
}
const StyledOverlay = toggleStyledComponent.toggleStyledComponent(CSS_MODULES_FLAG, 'div', styled__default.default.div.withConfig({
  displayName: "Overlay__StyledOverlay",
  componentId: "sc-51280t-0"
})(["background-color:", ";box-shadow:", ";position:absolute;min-width:192px;max-width:", ";height:", ";max-height:", ";width:", ";border-radius:12px;overflow:", ";animation:overlay-appear ", "ms ", ";@keyframes overlay-appear{0%{opacity:0;}100%{opacity:1;}}visibility:var(--styled-overlay-visibility);:focus{outline:none;}@media (forced-colors:active){outline:solid 1px transparent;}&[data-reflow-container='true']{max-width:calc(100vw - 2rem);}", ";"], constants.get('colors.canvas.overlay'), constants.get('shadows.overlay.shadow'), props => props.maxWidth && widthMap[props.maxWidth], props => heightMap[props.height || 'auto'], props => props.maxHeight ? heightMap[props.maxHeight] : '100vh', props => widthMap[props.width || 'auto'], props => props.overflow ? props.overflow : 'hidden', animationDuration, constants.get('animation.easeOutCubic'), sx.default));
/**
 * An `Overlay` is a flexible floating surface, used to display transient content such as menus,
 * selection options, dialogs, and more. Overlays use shadows to express elevation. The `Overlay`
 * component handles all behaviors needed by overlay UIs as well as the common styles that all overlays * should have.
 * @param height Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.
 * @param width Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.
 * @param maxHeight Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.
 * @param top Optional. Vertical top position of the overlay, relative to its closest positioned ancestor (often its `Portal`).
 * @param left Optional. Horizontal left position of the overlay, relative to its closest positioned ancestor (often its `Portal`).
 * @param right Optional. Horizontal right position of the overlay, relative to its closest positioned ancestor (often its `Portal`).
 * @param bottom Optional. Vertical bottom position of the overlay, relative to its closest positioned ancestor (often its `Portal`).
 * @param position Optional. Sets how an element is positioned in a document. Defaults to `absolute` positioning.
 */
const BaseOverlay = /*#__PURE__*/React__default.default.forwardRef(({
  visibility,
  height,
  width,
  top,
  left,
  right,
  bottom,
  position,
  style: styleFromProps = {},
  className,
  maxHeight,
  maxWidth,
  ...rest
}, forwardedRef) => {
  const cssModulesEnabled = useFeatureFlag.useFeatureFlag(CSS_MODULES_FLAG);
  if (cssModulesEnabled) {
    return /*#__PURE__*/React__default.default.createElement(StyledOverlay, _extends({}, rest, {
      ref: forwardedRef,
      style: {
        left,
        right,
        top,
        bottom,
        position,
        ...styleFromProps
      },
      [`data-width-${width}`]: '',
      [`data-max-width-${maxWidth}`]: maxWidth ? '' : undefined,
      [`data-height-${height}`]: '',
      [`data-max-height-${maxHeight}`]: maxHeight ? '' : undefined,
      [`data-visibility-${visibility}`]: '',
      className: clsx.clsx(className, Overlay_module.Overlay)
    }));
  } else {
    return /*#__PURE__*/React__default.default.createElement(StyledOverlay, _extends({
      height: height,
      width: width,
      maxHeight: maxHeight,
      maxWidth: maxWidth
    }, rest, {
      ref: forwardedRef,
      style: {
        left,
        right,
        top,
        bottom,
        position,
        '--styled-overlay-visibility': visibility,
        ...styleFromProps
      },
      className: className
    }));
  }
});
/**
 * @param anchorSide If provided, the Overlay will slide into position from the side of the anchor with a brief animation
 * @param height Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.
 * @param ignoreClickRefs Optional. An array of ref objects to ignore clicks on in the `onOutsideClick` behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the `Overlay` to prevent the `Overlay` from being toggled twice.
 * @param initialFocusRef Optional. Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused.
 * @param left Optional. Horizontal left position of the overlay, relative to its closest positioned ancestor (often its `Portal`).
 * @param onClickOutside  Required. Function to call when clicking outside of the `Overlay`. Typically this function removes the Overlay.
 * @param onEscape Required. Function to call when user presses `Escape`. Typically this function removes the Overlay.
 * @param portalContainerName Optional. The name of the portal container to render the Overlay into.
 * @param preventOverflow Optional. The Overlay width will be adjusted responsively if there is not enough space to display the Overlay. If `preventOverflow` is `true`, the width of the `Overlay` will not be adjusted.
 * @param preventFocusOnOpen Optional. If 'true', focus will not be applied when the component is first mounted, even if initialFocusRef prop is given.
 * @param returnFocusRef Required. Ref for the element to focus when the `Overlay` is closed.
 * @param right Optional. Horizontal right position of the overlay, relative to its closest positioned ancestor (often its `Portal`).
 * @param width Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.

 */
const Overlay = /*#__PURE__*/React__default.default.forwardRef(({
  anchorSide,
  height = 'auto',
  ignoreClickRefs,
  initialFocusRef,
  left,
  onClickOutside,
  onEscape,
  portalContainerName,
  preventOverflow = true,
  preventFocusOnOpen,
  returnFocusRef,
  right,
  role = 'none',
  visibility = 'visible',
  width = 'auto',
  ...props
}, forwardedRef) => {
  const overlayRef = React.useRef(null);
  useRefObjectAsForwardedRef.useRefObjectAsForwardedRef(forwardedRef, overlayRef);
  const {
    theme
  } = ThemeProvider.useTheme();
  const slideAnimationDistance = parseInt(constants.get('space.2')(theme).replace('px', ''));
  const slideAnimationEasing = constants.get('animation.easeOutCubic')(theme);
  useOverlay.useOverlay({
    overlayRef,
    returnFocusRef,
    onEscape,
    ignoreClickRefs,
    onClickOutside,
    initialFocusRef,
    preventFocusOnOpen
  });
  React.useEffect(() => {
    var _overlayRef$current;
    if (height === 'initial' && (_overlayRef$current = overlayRef.current) !== null && _overlayRef$current !== undefined && _overlayRef$current.clientHeight) {
      overlayRef.current.style.height = `${overlayRef.current.clientHeight}px`;
    }
  }, [height]);
  useIsomorphicLayoutEffect(() => {
    var _overlayRef$current2;
    const {
      x,
      y
    } = getSlideAnimationStartingVector(anchorSide);
    if (!x && !y || !((_overlayRef$current2 = overlayRef.current) !== null && _overlayRef$current2 !== undefined && _overlayRef$current2.animate) || visibility === 'hidden') {
      return;
    }

    // JS animation is required because Safari does not allow css animations to start paused and then run
    overlayRef.current.animate({
      transform: [`translate(${slideAnimationDistance * x}px, ${slideAnimationDistance * y}px)`, `translate(0, 0)`]
    }, {
      duration: animationDuration,
      easing: slideAnimationEasing
    });
  }, [anchorSide, slideAnimationDistance, slideAnimationEasing, visibility]);

  // To be backwards compatible with the old Overlay, we need to set the left prop if x-position is not specified
  const leftPosition = left === undefined && right === undefined ? 0 : left;
  const overflowEnabled = useFeatureFlag.useFeatureFlag('primer_react_overlay_overflow');
  return /*#__PURE__*/React__default.default.createElement(Portal.Portal, {
    containerName: portalContainerName
  }, /*#__PURE__*/React__default.default.createElement(BaseOverlay, _extends({
    role: role,
    width: width,
    "data-reflow-container": overflowEnabled || !preventOverflow ? true : undefined,
    ref: overlayRef,
    left: leftPosition,
    right: right,
    height: height,
    visibility: visibility
  }, props)));
});

exports.BaseOverlay = BaseOverlay;
exports.default = Overlay;
exports.heightMap = heightMap;
