import React, { type FC } from 'react';
import type { IconProps } from '@primer/octicons-react';
import { type SxProp } from '../../sx';
import type { ForwardRefComponent as PolymorphicForwardRefComponent } from '../../utils/polymorphic';
export declare const GAP = 8;
export declare const StyledUnderlineWrapper: React.ForwardRefExoticComponent<{
    slot?: string;
    as?: React.ElementType;
    className?: string;
} & SxProp & {
    children?: React.ReactNode | undefined;
} & React.RefAttributes<unknown>>;
export declare const StyledUnderlineItemList: PolymorphicForwardRefComponent<"ul">;
export declare const StyledUnderlineItem: React.ForwardRefExoticComponent<Omit<{
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} & {
    theme?: any;
} & {
    as?: string | React.ComponentType<any> | undefined;
    forwardedAs?: string | React.ComponentType<any> | undefined;
}, "ref"> & React.RefAttributes<unknown>>;
export declare const StyledComponentLoadingCounter: React.ForwardRefExoticComponent<Omit<{
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} & {
    theme?: any;
} & {
    as?: string | React.ComponentType<any> | undefined;
    forwardedAs?: string | React.ComponentType<any> | undefined;
}, "ref"> & React.RefAttributes<unknown>>;
export declare const LoadingCounter: () => React.JSX.Element;
export type UnderlineItemProps = {
    as?: React.ElementType | 'a' | 'button';
    iconsVisible?: boolean;
    loadingCounters?: boolean;
    counter?: number | string;
    icon?: FC<IconProps> | React.ReactElement;
    id?: string;
} & SxProp;
export declare const UnderlineItem: PolymorphicForwardRefComponent<"a", UnderlineItemProps>;
//# sourceMappingURL=UnderlineTabbedInterface.d.ts.map