import {
  require_jsx_runtime
} from "./chunk-5AS4NL4J.js";
import {
  require_react
} from "./chunk-RUPNRBO7.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}

// node_modules/@uiw/react-heat-map/esm/index.js
var import_react7 = __toESM(require_react());

// node_modules/@uiw/react-heat-map/esm/SVG.js
var import_react6 = __toESM(require_react());

// node_modules/@uiw/react-heat-map/esm/LabelsWeek.js
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var textStyle = {
  textAnchor: "middle",
  fontSize: "inherit",
  fill: "currentColor"
};
var LabelsWeek = (_ref) => {
  var {
    weekLabels = [],
    rectSize = 0,
    topPad = 0,
    space = 0
  } = _ref;
  return (0, import_react.useMemo)(() => (0, import_jsx_runtime.jsx)(import_react.Fragment, {
    children: [...Array(7)].map((_, idx) => {
      if (weekLabels && weekLabels[idx]) {
        return (0, import_jsx_runtime.jsx)("text", {
          className: "w-heatmap-week",
          x: 15,
          y: topPad,
          dy: (idx + 1) * (rectSize + space) - 5,
          style: textStyle,
          children: weekLabels[idx]
        }, idx);
      }
      return null;
    })
  }), [rectSize, space, topPad, weekLabels]);
};

// node_modules/@uiw/react-heat-map/esm/LabelsMonth.js
var import_react2 = __toESM(require_react());

// node_modules/@uiw/react-heat-map/esm/utils.js
var oneDayTime = 24 * 60 * 60 * 1e3;
function isValidDate(date) {
  return date instanceof Date && !isNaN(date.getTime());
}
function getDateToString(date) {
  return date.getFullYear() + "/" + (date.getMonth() + 1) + "/" + date.getDate();
}
function formatData(data) {
  if (data === void 0) {
    data = [];
  }
  var result = {};
  data.forEach((item) => {
    if (item.date && isValidDate(new Date(item.date))) {
      item.date = getDateToString(new Date(item.date));
      result[item.date] = item;
    }
  });
  return result;
}
function numberSort(keys) {
  if (keys === void 0) {
    keys = [];
  }
  return keys.sort((x, y) => {
    if (x < y) return -1;
    else if (x > y) return 1;
    return 0;
  });
}
function existColor(num, nums, panelColors) {
  if (num === void 0) {
    num = 0;
  }
  if (panelColors === void 0) {
    panelColors = {};
  }
  var color = "";
  for (var a = 0; a < nums.length; a += 1) {
    if (nums[a] > num) {
      color = panelColors[nums[a]];
      break;
    }
    color = panelColors[nums[a]];
  }
  return color;
}
var convertPanelColors = (colors, maxCount) => {
  var step = Math.ceil(maxCount / (colors.length - 1));
  var panelColors = {};
  colors.forEach((color, index) => {
    panelColors[index * step] = color;
  });
  return panelColors;
};

// node_modules/@uiw/react-heat-map/esm/LabelsMonth.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var generateData = (colNum, monthLabels, startDate, endDate) => {
  if (monthLabels === false || colNum < 1) return [];
  return Array.from({
    length: colNum * 7
  }).map((_, idx) => {
    if (idx / 7 % 1 === 0) {
      var date = new Date(startDate.getTime() + idx * oneDayTime);
      var month = date.getMonth();
      if (endDate && date > endDate) return null;
      return {
        col: idx / 7,
        index: idx,
        month,
        day: date.getDate(),
        monthStr: monthLabels[month],
        date
      };
    }
    return null;
  }).filter(Boolean).filter((item, idx, list) => list[idx - 1] && list[idx - 1].month !== item.month);
};
var LabelsMonth = (_ref) => {
  var {
    monthLabels = [],
    rectSize = 0,
    space = 0,
    leftPad = 0,
    colNum = 0,
    rectY = 15,
    startDate,
    endDate
  } = _ref;
  var data = (0, import_react2.useMemo)(() => generateData(colNum, monthLabels, startDate, endDate), [colNum, monthLabels, startDate, endDate]);
  return (0, import_jsx_runtime2.jsx)(import_react2.Fragment, {
    children: data.map((item, idx) => (0, import_jsx_runtime2.jsx)("text", {
      "data-size": rectSize,
      x: leftPad + space + space,
      y: rectY,
      dx: item.col * (rectSize + space),
      textAnchor: "start",
      style: textStyle,
      children: item.monthStr
    }, idx))
  });
};

// node_modules/@uiw/react-heat-map/esm/Legend.js
var import_react4 = __toESM(require_react());

// node_modules/@uiw/react-heat-map/esm/Rect.js
var import_react3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _excluded = ["style", "value", "render", "key"];
var Rect = (props) => {
  var {
    style,
    value,
    render
  } = props, reset = _objectWithoutPropertiesLoose(props, _excluded);
  var rectProps = _extends({}, reset, {
    style: _extends({
      display: "block",
      cursor: "pointer"
    }, style)
  });
  if (render && typeof render === "function") {
    var elm = render(_extends({}, rectProps), value);
    if (elm && import_react3.default.isValidElement(elm)) {
      return elm;
    }
  }
  return (0, import_jsx_runtime3.jsx)("rect", _extends({}, rectProps));
};

// node_modules/@uiw/react-heat-map/esm/Legend.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded2 = ["panelColors", "leftPad", "topPad", "rectY", "space", "rectSize", "legendCellSize", "legendRender"];
function Legend(_ref) {
  var {
    panelColors,
    leftPad = 0,
    topPad = 0,
    rectY = 15,
    space = 0,
    rectSize = 0,
    legendCellSize = 0,
    legendRender
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded2);
  var size = legendCellSize || rectSize;
  return (0, import_react4.useMemo)(() => (0, import_jsx_runtime4.jsx)(import_react4.Fragment, {
    children: Object.keys(panelColors || {}).map((num, key) => {
      var rectProps = _extends({}, props, {
        key,
        x: (size + 1) * key + leftPad,
        y: rectY,
        // y: topPad + rectSize * 8 + 6,
        fill: panelColors[Number(num)],
        width: size,
        height: size
      });
      if (legendRender) return legendRender(rectProps);
      return (0, import_react4.createElement)(Rect, _extends({}, rectProps, {
        key
      }));
    })
  }), [panelColors, props, size, rectY, leftPad, rectSize, legendRender]);
}

// node_modules/@uiw/react-heat-map/esm/Day.js
var import_react5 = __toESM(require_react());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var Day = (props) => {
  var {
    transform,
    gridNum = 0,
    startY = 0,
    panelColors = {},
    initStartDate,
    space = 2,
    value = [],
    rectSize = 11,
    endDate,
    rectProps,
    rectRender
  } = props;
  var data = (0, import_react5.useMemo)(() => formatData(value), [value]);
  var nums = (0, import_react5.useMemo)(() => numberSort(Object.keys(panelColors).map((item) => parseInt(item, 10))), [panelColors]);
  return (0, import_jsx_runtime5.jsx)("g", {
    transform,
    children: gridNum > 0 && [...Array(gridNum)].map((_, idx) => {
      return (0, import_jsx_runtime5.jsx)("g", {
        "data-column": idx,
        children: [...Array(7)].map((_2, cidx) => {
          var currentDate = new Date(initStartDate.getTime() + oneDayTime * (idx * 7 + cidx));
          var date = getDateToString(currentDate);
          var dataProps = _extends({}, data[date], {
            date,
            row: cidx,
            column: idx,
            index: idx * 7 + cidx
          });
          var dayProps = _extends({}, rectProps, {
            fill: "var(--rhm-rect, #EBEDF0)",
            width: rectSize,
            height: rectSize,
            x: idx * (rectSize + space),
            y: (rectSize + space) * cidx,
            render: rectRender,
            value: dataProps
          });
          if (endDate instanceof Date && currentDate.getTime() > endDate.getTime()) {
            return null;
          }
          if (date && data[date] && panelColors && Object.keys(panelColors).length > 0) {
            dayProps.fill = existColor(data[date].count || 0, nums, panelColors);
          } else if (panelColors && panelColors[0]) {
            dayProps.fill = panelColors[0];
          }
          return (0, import_react5.createElement)(Rect, _extends({}, dayProps, {
            key: cidx,
            value: dataProps,
            "data-date": date,
            "data-index": dataProps.index,
            "data-row": dataProps.row,
            "data-column": dataProps.column
          }));
        })
      }, idx);
    })
  });
};

// node_modules/@uiw/react-heat-map/esm/SVG.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded3 = ["rectSize", "legendCellSize", "space", "monthPlacement", "startDate", "endDate", "rectProps", "rectRender", "legendRender", "value", "weekLabels", "monthLabels", "panelColors", "style"];
function SVG(props) {
  var _ref = props || {}, {
    rectSize = 11,
    legendCellSize = 11,
    space = 2,
    monthPlacement = "top",
    startDate = /* @__PURE__ */ new Date(),
    endDate,
    rectProps,
    rectRender,
    legendRender,
    value = [],
    weekLabels = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    monthLabels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    panelColors = ["var(--rhm-rect, #EBEDF0)", "#C6E48B", "#7BC96F", "#239A3B", "#196127"],
    style
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded3);
  var maxCount = Math.max(...value.map((item) => item.count), 0);
  var panelColorsObject = Array.isArray(panelColors) ? convertPanelColors(panelColors, maxCount) : panelColors;
  var [gridNum, setGridNum] = (0, import_react6.useState)(0);
  var [leftPad, setLeftPad] = (0, import_react6.useState)(!!weekLabels ? 28 : 5);
  var defaultTopPad = monthPlacement === "top" ? 20 : 5;
  var [topPad, setTopPad] = (0, import_react6.useState)(!!monthLabels ? defaultTopPad : 5);
  var svgRef = import_react6.default.createRef();
  (0, import_react6.useEffect)(() => setLeftPad(!!weekLabels ? 28 : 5), [weekLabels]);
  (0, import_react6.useEffect)(() => {
    if (svgRef.current) {
      var width = svgRef.current.clientWidth - leftPad || 0;
      setGridNum(Math.floor(width / (rectSize + space)) || 0);
    }
  }, [rectSize, svgRef, space, leftPad]);
  (0, import_react6.useEffect)(() => {
    setTopPad(!!monthLabels ? defaultTopPad : 5);
  }, [monthLabels]);
  var initStartDate = (0, import_react6.useMemo)(() => {
    if (isValidDate(startDate)) {
      return !startDate.getDay() ? startDate : new Date(startDate.getTime() - startDate.getDay() * oneDayTime);
    } else {
      var newDate = /* @__PURE__ */ new Date();
      return new Date(newDate.getTime() - newDate.getDay() * oneDayTime);
    }
  }, [startDate]);
  var styl = {
    color: "var(--rhm-text-color, #24292e)",
    userSelect: "none",
    display: "block",
    fontSize: 10
  };
  var monthRectY = monthPlacement === "top" ? 15 : 15 * 7 + space;
  var legendTopPad = monthPlacement === "top" ? topPad + rectSize * 8 + 6 : (!!monthLabels ? topPad + rectSize + space : topPad) + rectSize * 8 + 6;
  return (0, import_jsx_runtime6.jsxs)("svg", _extends({
    ref: svgRef,
    style: _extends({}, styl, style)
  }, other, {
    children: [legendCellSize !== 0 && (0, import_jsx_runtime6.jsx)(Legend, {
      legendRender,
      panelColors: panelColorsObject,
      rectSize,
      rectY: legendTopPad,
      legendCellSize,
      leftPad,
      topPad,
      space
    }), (0, import_jsx_runtime6.jsx)(LabelsWeek, {
      weekLabels,
      rectSize,
      space,
      topPad
    }), (0, import_jsx_runtime6.jsx)(LabelsMonth, {
      monthLabels,
      rectSize,
      space,
      leftPad,
      colNum: gridNum,
      rectY: monthRectY,
      startDate: initStartDate,
      endDate
    }), (0, import_jsx_runtime6.jsx)(Day, {
      transform: "translate(" + leftPad + ", " + topPad + ")",
      gridNum,
      initStartDate,
      endDate,
      rectProps,
      rectSize,
      rectRender,
      panelColors: panelColorsObject,
      value,
      space
    })]
  }));
}

// node_modules/@uiw/react-heat-map/esm/index.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
import "D:/CODEPULSE/CODEPULSE_FRONTEND/node_modules/@uiw/react-heat-map/esm/style/index.css";
var _excluded4 = ["prefixCls", "className"];
function HeatMap(props) {
  var {
    prefixCls = "w-heatmap",
    className
  } = props, others = _objectWithoutPropertiesLoose(props, _excluded4);
  var cls = [className, prefixCls].filter(Boolean).join(" ");
  return (0, import_jsx_runtime7.jsx)(SVG, _extends({
    className: cls
  }, others));
}
export {
  HeatMap as default
};
//# sourceMappingURL=@uiw_react-heat-map.js.map
